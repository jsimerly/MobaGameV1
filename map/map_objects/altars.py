from map.map_objects.base import StructureBase
from components import HealthComponent
from typing import Callable

class AltarBase(StructureBase):
    def __init__(self, 
            spawn_turn:int,
            control_points_needed:int,
            control_turns: int,
            max_turns:int,

            draw_function:Callable,
            draw_kwargs:dict,
            reward_function:Callable,

            name:str,
            sprite, 
            is_passable=False,
            is_los=True,
            is_conealing=False,
        ):
        super().__init__(
            name=name, 
            is_passable=is_passable, 
            is_los=is_los, 
            is_concealing=is_conealing, 
            sprite=sprite,
        )
        #These are generated by having someone standing in the ring
        self.control_points_needed = control_points_needed
        self.spawn_turn = spawn_turn
        self.control_turn = control_turns
        self.max_turns = max_turns

        self.draw_function = draw_function
        self.draw_kwargs = draw_kwargs
        self.reward_function = reward_function

        #consider moving this into a delegate if we want cps to persist to the next 'altar-cation'
        self.team_1_cps = 0
        self.team_2_cps = 0

        self.is_active = False
        self.is_complete = False

    def spawn(self):
        self.is_active=True
        self.draw()

    def draw(self):
        self.draw_function(**self.draw_kwargs)
    
    def check_for_altar_winner(self) -> (bool, str):
        t1_cps = self.team_1_cps
        t2_cps = self.team_2_cps

        if max(t1_cps, t2_cps) >= self.control_points_needed:
            if t2_cps < t1_cps:
                (True, 'team_2')
            if t1_cps > t2_cps:
                return (True, 'team_1')

    def despawn(self):
        self.is_active=True
        #undraw the object
            